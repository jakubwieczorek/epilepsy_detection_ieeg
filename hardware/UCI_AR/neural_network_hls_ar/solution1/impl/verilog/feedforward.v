// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="feedforward_feedforward,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.495120,HLS_SYN_LAT=580,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=6445,HLS_SYN_LUT=9407,HLS_VERSION=2020_2}" *)

module feedforward (
        ap_clk,
        ap_rst_n,
        x_Addr_A,
        x_EN_A,
        x_WEN_A,
        x_Din_A,
        x_Dout_A,
        x_Clk_A,
        x_Rst_A,
        y_Addr_A,
        y_EN_A,
        y_WEN_A,
        y_Din_A,
        y_Dout_A,
        y_Clk_A,
        y_Rst_A,
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 81'd1;
parameter    ap_ST_fsm_state2 = 81'd2;
parameter    ap_ST_fsm_state3 = 81'd4;
parameter    ap_ST_fsm_state4 = 81'd8;
parameter    ap_ST_fsm_state5 = 81'd16;
parameter    ap_ST_fsm_pp2_stage0 = 81'd32;
parameter    ap_ST_fsm_pp2_stage1 = 81'd64;
parameter    ap_ST_fsm_pp2_stage2 = 81'd128;
parameter    ap_ST_fsm_pp2_stage3 = 81'd256;
parameter    ap_ST_fsm_pp2_stage4 = 81'd512;
parameter    ap_ST_fsm_pp2_stage5 = 81'd1024;
parameter    ap_ST_fsm_pp2_stage6 = 81'd2048;
parameter    ap_ST_fsm_pp2_stage7 = 81'd4096;
parameter    ap_ST_fsm_pp2_stage8 = 81'd8192;
parameter    ap_ST_fsm_pp2_stage9 = 81'd16384;
parameter    ap_ST_fsm_pp2_stage10 = 81'd32768;
parameter    ap_ST_fsm_pp2_stage11 = 81'd65536;
parameter    ap_ST_fsm_pp2_stage12 = 81'd131072;
parameter    ap_ST_fsm_pp2_stage13 = 81'd262144;
parameter    ap_ST_fsm_pp2_stage14 = 81'd524288;
parameter    ap_ST_fsm_pp2_stage15 = 81'd1048576;
parameter    ap_ST_fsm_state28 = 81'd2097152;
parameter    ap_ST_fsm_state29 = 81'd4194304;
parameter    ap_ST_fsm_state30 = 81'd8388608;
parameter    ap_ST_fsm_state31 = 81'd16777216;
parameter    ap_ST_fsm_state32 = 81'd33554432;
parameter    ap_ST_fsm_state33 = 81'd67108864;
parameter    ap_ST_fsm_state34 = 81'd134217728;
parameter    ap_ST_fsm_state35 = 81'd268435456;
parameter    ap_ST_fsm_state36 = 81'd536870912;
parameter    ap_ST_fsm_state37 = 81'd1073741824;
parameter    ap_ST_fsm_state38 = 81'd2147483648;
parameter    ap_ST_fsm_state39 = 81'd4294967296;
parameter    ap_ST_fsm_state40 = 81'd8589934592;
parameter    ap_ST_fsm_pp4_stage0 = 81'd17179869184;
parameter    ap_ST_fsm_pp4_stage1 = 81'd34359738368;
parameter    ap_ST_fsm_pp4_stage2 = 81'd68719476736;
parameter    ap_ST_fsm_pp4_stage3 = 81'd137438953472;
parameter    ap_ST_fsm_pp4_stage4 = 81'd274877906944;
parameter    ap_ST_fsm_pp4_stage5 = 81'd549755813888;
parameter    ap_ST_fsm_pp4_stage6 = 81'd1099511627776;
parameter    ap_ST_fsm_pp4_stage7 = 81'd2199023255552;
parameter    ap_ST_fsm_pp4_stage8 = 81'd4398046511104;
parameter    ap_ST_fsm_pp4_stage9 = 81'd8796093022208;
parameter    ap_ST_fsm_state52 = 81'd17592186044416;
parameter    ap_ST_fsm_state53 = 81'd35184372088832;
parameter    ap_ST_fsm_state54 = 81'd70368744177664;
parameter    ap_ST_fsm_state55 = 81'd140737488355328;
parameter    ap_ST_fsm_state56 = 81'd281474976710656;
parameter    ap_ST_fsm_state57 = 81'd562949953421312;
parameter    ap_ST_fsm_state58 = 81'd1125899906842624;
parameter    ap_ST_fsm_state59 = 81'd2251799813685248;
parameter    ap_ST_fsm_state60 = 81'd4503599627370496;
parameter    ap_ST_fsm_state61 = 81'd9007199254740992;
parameter    ap_ST_fsm_state62 = 81'd18014398509481984;
parameter    ap_ST_fsm_state63 = 81'd36028797018963968;
parameter    ap_ST_fsm_state64 = 81'd72057594037927936;
parameter    ap_ST_fsm_state65 = 81'd144115188075855872;
parameter    ap_ST_fsm_state66 = 81'd288230376151711744;
parameter    ap_ST_fsm_state67 = 81'd576460752303423488;
parameter    ap_ST_fsm_state68 = 81'd1152921504606846976;
parameter    ap_ST_fsm_state69 = 81'd2305843009213693952;
parameter    ap_ST_fsm_state70 = 81'd4611686018427387904;
parameter    ap_ST_fsm_state71 = 81'd9223372036854775808;
parameter    ap_ST_fsm_state72 = 81'd18446744073709551616;
parameter    ap_ST_fsm_state73 = 81'd36893488147419103232;
parameter    ap_ST_fsm_state74 = 81'd73786976294838206464;
parameter    ap_ST_fsm_state75 = 81'd147573952589676412928;
parameter    ap_ST_fsm_state76 = 81'd295147905179352825856;
parameter    ap_ST_fsm_state77 = 81'd590295810358705651712;
parameter    ap_ST_fsm_state78 = 81'd1180591620717411303424;
parameter    ap_ST_fsm_state79 = 81'd2361183241434822606848;
parameter    ap_ST_fsm_state80 = 81'd4722366482869645213696;
parameter    ap_ST_fsm_state81 = 81'd9444732965739290427392;
parameter    ap_ST_fsm_state82 = 81'd18889465931478580854784;
parameter    ap_ST_fsm_state83 = 81'd37778931862957161709568;
parameter    ap_ST_fsm_state84 = 81'd75557863725914323419136;
parameter    ap_ST_fsm_state85 = 81'd151115727451828646838272;
parameter    ap_ST_fsm_state86 = 81'd302231454903657293676544;
parameter    ap_ST_fsm_state87 = 81'd604462909807314587353088;
parameter    ap_ST_fsm_state88 = 81'd1208925819614629174706176;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [31:0] x_Addr_A;
output   x_EN_A;
output  [3:0] x_WEN_A;
output  [31:0] x_Din_A;
input  [31:0] x_Dout_A;
output   x_Clk_A;
output   x_Rst_A;
output  [31:0] y_Addr_A;
output   y_EN_A;
output  [3:0] y_WEN_A;
output  [31:0] y_Din_A;
input  [31:0] y_Dout_A;
output   y_Clk_A;
output   y_Rst_A;
input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;
output   interrupt;

reg x_EN_A;
reg y_EN_A;
reg[3:0] y_WEN_A;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [80:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [3:0] w1_0_address0;
reg    w1_0_ce0;
wire   [31:0] w1_0_q0;
wire   [3:0] w1_1_address0;
reg    w1_1_ce0;
wire   [31:0] w1_1_q0;
wire   [3:0] w1_2_address0;
reg    w1_2_ce0;
wire   [31:0] w1_2_q0;
wire   [3:0] w1_3_address0;
reg    w1_3_ce0;
wire   [31:0] w1_3_q0;
wire   [3:0] w1_4_address0;
reg    w1_4_ce0;
wire   [31:0] w1_4_q0;
wire   [3:0] w1_5_address0;
reg    w1_5_ce0;
wire   [31:0] w1_5_q0;
wire   [3:0] w1_6_address0;
reg    w1_6_ce0;
wire   [31:0] w1_6_q0;
wire   [3:0] w1_7_address0;
reg    w1_7_ce0;
wire   [31:0] w1_7_q0;
wire   [3:0] w1_8_address0;
reg    w1_8_ce0;
wire   [31:0] w1_8_q0;
wire   [3:0] w1_9_address0;
reg    w1_9_ce0;
wire   [31:0] w1_9_q0;
wire   [3:0] w1_10_address0;
reg    w1_10_ce0;
wire   [31:0] w1_10_q0;
wire   [3:0] w1_11_address0;
reg    w1_11_ce0;
wire   [31:0] w1_11_q0;
wire   [3:0] w1_12_address0;
reg    w1_12_ce0;
wire   [31:0] w1_12_q0;
wire   [3:0] w1_13_address0;
reg    w1_13_ce0;
wire   [31:0] w1_13_q0;
wire   [3:0] w1_14_address0;
reg    w1_14_ce0;
wire   [31:0] w1_14_q0;
wire   [3:0] w1_15_address0;
reg    w1_15_ce0;
wire   [31:0] w1_15_q0;
wire   [3:0] b1_address0;
reg    b1_ce0;
wire   [31:0] b1_q0;
wire   [3:0] w2_0_address0;
reg    w2_0_ce0;
wire   [31:0] w2_0_q0;
reg   [3:0] i_reg_598;
reg   [4:0] i_1_reg_620;
reg   [31:0] empty_20_reg_631;
wire   [31:0] wy_sum_q1;
reg   [31:0] reg_743;
wire    ap_CS_fsm_pp2_stage1;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state7_pp2_stage1_iter0;
wire    ap_block_state23_pp2_stage1_iter1;
wire    ap_block_pp2_stage1_11001;
reg   [0:0] icmp_ln26_reg_1110;
wire   [31:0] wy_sum_q0;
wire    ap_CS_fsm_pp2_stage10;
wire    ap_block_state16_pp2_stage10_iter0;
wire    ap_block_pp2_stage10_11001;
wire    ap_CS_fsm_state30;
reg   [31:0] reg_750;
reg   [31:0] reg_757;
wire    ap_CS_fsm_pp2_stage2;
wire    ap_block_state8_pp2_stage2_iter0;
wire    ap_block_state24_pp2_stage2_iter1;
wire    ap_block_pp2_stage2_11001;
wire    ap_CS_fsm_pp2_stage11;
wire    ap_block_state17_pp2_stage11_iter0;
wire    ap_block_pp2_stage11_11001;
reg   [31:0] reg_763;
wire   [31:0] grp_fu_664_p2;
reg   [31:0] reg_769;
wire    ap_CS_fsm_pp2_stage5;
wire    ap_block_state11_pp2_stage5_iter0;
wire    ap_block_state27_pp2_stage5_iter1;
wire    ap_block_pp2_stage5_11001;
wire    ap_CS_fsm_pp4_stage5;
reg    ap_enable_reg_pp4_iter0;
wire    ap_block_state46_pp4_stage5_iter0;
wire    ap_block_pp4_stage5_11001;
reg   [0:0] icmp_ln39_reg_1487;
wire   [31:0] grp_fu_641_p2;
reg   [31:0] reg_774;
wire    ap_CS_fsm_pp2_stage13;
wire    ap_block_state19_pp2_stage13_iter0;
wire    ap_block_pp2_stage13_11001;
wire    ap_CS_fsm_pp2_stage15;
wire    ap_block_state21_pp2_stage15_iter0;
wire    ap_block_pp2_stage15_11001;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter1;
wire    ap_block_state41_pp4_stage0_iter0;
wire    ap_block_state51_pp4_stage0_iter1;
wire    ap_block_pp4_stage0_11001;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state71;
wire   [31:0] grp_fu_645_p2;
reg   [31:0] reg_783;
wire    ap_CS_fsm_pp2_stage12;
wire    ap_block_state18_pp2_stage12_iter0;
wire    ap_block_pp2_stage12_11001;
wire    ap_CS_fsm_pp2_stage14;
wire    ap_block_state20_pp2_stage14_iter0;
wire    ap_block_pp2_stage14_11001;
reg   [31:0] reg_789;
reg   [31:0] reg_795;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_state6_pp2_stage0_iter0;
wire    ap_block_state22_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_11001;
reg   [31:0] reg_801;
wire   [4:0] empty_12_fu_807_p2;
wire    ap_CS_fsm_state2;
wire   [4:0] empty_15_fu_824_p2;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [3:0] add_ln26_fu_841_p2;
reg   [3:0] add_ln26_reg_1105;
wire   [0:0] icmp_ln26_fu_847_p2;
reg   [0:0] icmp_ln26_reg_1110_pp2_iter1_reg;
reg   [31:0] x_load_reg_1199;
reg   [31:0] w1_0_load_reg_1204;
reg   [31:0] w1_1_load_reg_1209;
reg   [31:0] w1_2_load_reg_1214;
reg   [31:0] w1_3_load_reg_1219;
reg   [31:0] w1_4_load_reg_1224;
reg   [31:0] w1_5_load_reg_1229;
reg   [31:0] w1_6_load_reg_1234;
reg   [31:0] w1_7_load_reg_1239;
reg   [31:0] w1_8_load_reg_1244;
reg   [31:0] w1_9_load_reg_1249;
reg   [31:0] w1_10_load_reg_1254;
reg   [31:0] w1_11_load_reg_1259;
reg   [31:0] w1_12_load_reg_1264;
reg   [31:0] w1_13_load_reg_1269;
reg   [31:0] w1_14_load_reg_1274;
reg   [31:0] w1_15_load_reg_1279;
wire   [31:0] empty_18_fu_874_p1;
reg   [31:0] wy_sum_load_12_reg_1304;
wire    ap_CS_fsm_pp2_stage3;
wire    ap_block_state9_pp2_stage3_iter0;
wire    ap_block_state25_pp2_stage3_iter1;
wire    ap_block_pp2_stage3_11001;
wire   [31:0] grp_fu_668_p2;
reg   [31:0] mul_1_reg_1309;
wire   [31:0] grp_fu_672_p2;
reg   [31:0] mul_2_reg_1314;
wire   [31:0] grp_fu_676_p2;
reg   [31:0] mul_3_reg_1319;
wire   [31:0] grp_fu_680_p2;
reg   [31:0] mul_4_reg_1324;
wire   [31:0] grp_fu_684_p2;
reg   [31:0] mul_5_reg_1329;
wire   [31:0] grp_fu_688_p2;
reg   [31:0] mul_6_reg_1334;
wire   [31:0] grp_fu_692_p2;
reg   [31:0] mul_7_reg_1339;
wire   [31:0] grp_fu_696_p2;
reg   [31:0] mul_8_reg_1344;
wire   [31:0] grp_fu_700_p2;
reg   [31:0] mul_9_reg_1349;
wire   [31:0] grp_fu_704_p2;
reg   [31:0] mul_s_reg_1354;
wire   [31:0] grp_fu_708_p2;
reg   [31:0] mul_10_reg_1359;
wire   [31:0] grp_fu_712_p2;
reg   [31:0] mul_11_reg_1364;
wire   [31:0] grp_fu_716_p2;
reg   [31:0] mul_12_reg_1369;
wire   [31:0] grp_fu_720_p2;
reg   [31:0] mul_13_reg_1374;
wire   [31:0] grp_fu_724_p2;
reg   [31:0] mul_14_reg_1379;
reg   [31:0] wy_sum_load_2_reg_1384;
wire    ap_CS_fsm_pp2_stage6;
wire    ap_block_state12_pp2_stage6_iter0;
wire    ap_block_pp2_stage6_11001;
reg   [31:0] wy_sum_load_3_reg_1389;
wire    ap_CS_fsm_pp2_stage7;
wire    ap_block_state13_pp2_stage7_iter0;
wire    ap_block_pp2_stage7_11001;
reg   [31:0] wy_sum_load_4_reg_1394;
reg   [31:0] wy_sum_load_5_reg_1399;
wire    ap_CS_fsm_pp2_stage8;
wire    ap_block_state14_pp2_stage8_iter0;
wire    ap_block_pp2_stage8_11001;
reg   [31:0] wy_sum_load_6_reg_1404;
reg   [31:0] wy_sum_load_7_reg_1409;
wire    ap_CS_fsm_pp2_stage9;
wire    ap_block_state15_pp2_stage9_iter0;
wire    ap_block_pp2_stage9_11001;
reg   [31:0] wy_sum_load_8_reg_1414;
wire   [31:0] grp_fu_649_p2;
reg   [31:0] add_12_reg_1419;
wire   [31:0] grp_fu_653_p2;
reg   [31:0] add_13_reg_1424;
wire   [31:0] grp_fu_657_p2;
reg   [31:0] add_14_reg_1429;
reg   [31:0] add_s_reg_1434;
wire   [4:0] add_ln33_fu_893_p2;
reg   [4:0] add_ln33_reg_1439;
wire    ap_CS_fsm_state29;
wire   [63:0] zext_ln33_fu_905_p1;
reg   [63:0] zext_ln33_reg_1447;
wire   [0:0] icmp_ln33_fu_899_p2;
reg   [31:0] b1_load_reg_1462;
wire   [31:0] select_ln9_fu_953_p3;
reg   [31:0] select_ln9_reg_1467;
wire    ap_CS_fsm_state37;
wire   [0:0] y_addr_reg_1472;
wire    ap_CS_fsm_state39;
wire   [31:0] bitcast_ln41_fu_961_p1;
wire    ap_CS_fsm_state40;
wire   [4:0] add_ln39_fu_965_p2;
reg   [4:0] add_ln39_reg_1482;
wire   [0:0] icmp_ln39_fu_971_p2;
reg   [31:0] w2_0_load_reg_1501;
wire    ap_CS_fsm_pp4_stage1;
wire    ap_block_state42_pp4_stage1_iter0;
wire    ap_block_pp4_stage1_11001;
wire   [31:0] l1y_q0;
reg   [31:0] l1y_load_reg_1506;
wire   [31:0] xor_ln13_fu_987_p2;
reg   [31:0] xor_ln13_reg_1511;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state58;
wire   [31:0] grp_fu_738_p2;
reg   [31:0] tmp_reg_1521;
wire    ap_CS_fsm_state66;
wire   [31:0] grp_fu_728_p2;
reg   [31:0] div_i_reg_1526;
wire    ap_CS_fsm_state87;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state6;
wire    ap_block_pp2_stage15_subdone;
wire    ap_block_pp2_stage5_subdone;
wire    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state41;
wire    ap_block_state50_pp4_stage9_iter0;
wire    ap_block_pp4_stage9_subdone;
wire    ap_CS_fsm_pp4_stage9;
reg   [3:0] l1y_address0;
reg    l1y_ce0;
reg    l1y_we0;
reg   [31:0] l1y_d0;
reg   [3:0] wy_sum_address0;
reg    wy_sum_ce0;
reg    wy_sum_we0;
reg   [31:0] wy_sum_d0;
reg   [3:0] wy_sum_address1;
reg    wy_sum_ce1;
reg    wy_sum_we1;
reg   [31:0] wy_sum_d1;
reg   [4:0] empty_reg_576;
wire   [0:0] exitcond199_fu_813_p2;
reg   [4:0] empty_14_reg_587;
wire   [0:0] exitcond188_fu_830_p2;
wire    ap_CS_fsm_state3;
reg   [3:0] ap_phi_mux_i_phi_fu_602_p4;
wire    ap_block_pp2_stage0;
reg   [4:0] o_reg_609;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state28;
reg   [4:0] ap_phi_mux_i_1_phi_fu_624_p4;
wire    ap_block_pp4_stage0;
wire   [63:0] p_cast_fu_819_p1;
wire   [63:0] p_cast1_fu_836_p1;
wire   [63:0] zext_ln26_fu_853_p1;
wire   [63:0] zext_ln39_fu_977_p1;
wire    ap_block_pp2_stage1;
wire    ap_block_pp2_stage2;
wire    ap_block_pp2_stage5;
wire    ap_block_pp2_stage6;
wire    ap_block_pp2_stage7;
wire    ap_block_pp2_stage8;
wire    ap_block_pp2_stage9;
wire    ap_block_pp2_stage10;
wire    ap_block_pp2_stage11;
wire    ap_block_pp2_stage12;
wire    ap_block_pp2_stage13;
wire    ap_block_pp2_stage14;
wire    ap_block_pp2_stage15;
wire    ap_block_pp2_stage3;
wire    ap_CS_fsm_pp2_stage4;
wire    ap_block_state10_pp2_stage4_iter0;
wire    ap_block_state26_pp2_stage4_iter1;
wire    ap_block_pp2_stage4_11001;
wire    ap_block_pp2_stage4;
wire   [31:0] x_Addr_A_orig;
reg   [31:0] y_Addr_A_orig;
wire    ap_CS_fsm_state88;
reg   [31:0] grp_fu_641_p0;
reg   [31:0] grp_fu_641_p1;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_pp4_stage6;
wire    ap_block_pp4_stage6;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state67;
reg   [31:0] grp_fu_645_p0;
reg   [31:0] grp_fu_645_p1;
reg   [31:0] grp_fu_664_p0;
reg   [31:0] grp_fu_664_p1;
wire    ap_CS_fsm_pp4_stage2;
wire    ap_block_pp4_stage2;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state36;
wire   [31:0] grp_fu_738_p1;
wire   [31:0] bitcast_ln9_fu_911_p1;
wire   [7:0] tmp_1_fu_915_p4;
wire   [22:0] trunc_ln9_fu_925_p1;
wire   [0:0] icmp_ln9_1_fu_935_p2;
wire   [0:0] icmp_ln9_fu_929_p2;
wire   [0:0] or_ln9_fu_941_p2;
wire   [0:0] grp_fu_733_p2;
wire   [0:0] and_ln9_fu_947_p2;
wire   [31:0] bitcast_ln13_fu_983_p1;
reg   [80:0] ap_NS_fsm;
wire    ap_block_pp2_stage1_subdone;
wire    ap_block_pp2_stage2_subdone;
wire    ap_block_pp2_stage3_subdone;
wire    ap_block_pp2_stage4_subdone;
wire    ap_block_pp2_stage6_subdone;
wire    ap_block_pp2_stage7_subdone;
wire    ap_block_pp2_stage8_subdone;
wire    ap_block_pp2_stage9_subdone;
wire    ap_block_pp2_stage10_subdone;
wire    ap_block_pp2_stage11_subdone;
wire    ap_block_pp2_stage12_subdone;
wire    ap_block_pp2_stage13_subdone;
wire    ap_block_pp2_stage14_subdone;
wire    ap_block_pp4_stage1_subdone;
wire    ap_block_state43_pp4_stage2_iter0;
wire    ap_block_pp4_stage2_subdone;
wire    ap_block_pp4_stage2_11001;
wire    ap_block_state44_pp4_stage3_iter0;
wire    ap_block_pp4_stage3_subdone;
wire    ap_block_pp4_stage3_11001;
wire    ap_block_state45_pp4_stage4_iter0;
wire    ap_block_pp4_stage4_subdone;
wire    ap_block_pp4_stage4_11001;
wire    ap_block_pp4_stage5_subdone;
wire    ap_block_state47_pp4_stage6_iter0;
wire    ap_block_pp4_stage6_subdone;
wire    ap_block_pp4_stage6_11001;
wire    ap_block_state48_pp4_stage7_iter0;
wire    ap_block_pp4_stage7_subdone;
wire    ap_block_pp4_stage7_11001;
wire    ap_block_state49_pp4_stage8_iter0;
wire    ap_block_pp4_stage8_subdone;
wire    ap_block_pp4_stage8_11001;
wire    ap_block_pp4_stage9_11001;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 81'd1;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
end

feedforward_w1_0 #(
    .DataWidth( 32 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
w1_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w1_0_address0),
    .ce0(w1_0_ce0),
    .q0(w1_0_q0)
);

feedforward_w1_1 #(
    .DataWidth( 32 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
w1_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w1_1_address0),
    .ce0(w1_1_ce0),
    .q0(w1_1_q0)
);

feedforward_w1_2 #(
    .DataWidth( 32 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
w1_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w1_2_address0),
    .ce0(w1_2_ce0),
    .q0(w1_2_q0)
);

feedforward_w1_3 #(
    .DataWidth( 32 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
w1_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w1_3_address0),
    .ce0(w1_3_ce0),
    .q0(w1_3_q0)
);

feedforward_w1_4 #(
    .DataWidth( 32 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
w1_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w1_4_address0),
    .ce0(w1_4_ce0),
    .q0(w1_4_q0)
);

feedforward_w1_5 #(
    .DataWidth( 32 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
w1_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w1_5_address0),
    .ce0(w1_5_ce0),
    .q0(w1_5_q0)
);

feedforward_w1_6 #(
    .DataWidth( 32 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
w1_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w1_6_address0),
    .ce0(w1_6_ce0),
    .q0(w1_6_q0)
);

feedforward_w1_7 #(
    .DataWidth( 32 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
w1_7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w1_7_address0),
    .ce0(w1_7_ce0),
    .q0(w1_7_q0)
);

feedforward_w1_8 #(
    .DataWidth( 32 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
w1_8_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w1_8_address0),
    .ce0(w1_8_ce0),
    .q0(w1_8_q0)
);

feedforward_w1_9 #(
    .DataWidth( 32 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
w1_9_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w1_9_address0),
    .ce0(w1_9_ce0),
    .q0(w1_9_q0)
);

feedforward_w1_10 #(
    .DataWidth( 32 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
w1_10_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w1_10_address0),
    .ce0(w1_10_ce0),
    .q0(w1_10_q0)
);

feedforward_w1_11 #(
    .DataWidth( 32 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
w1_11_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w1_11_address0),
    .ce0(w1_11_ce0),
    .q0(w1_11_q0)
);

feedforward_w1_12 #(
    .DataWidth( 32 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
w1_12_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w1_12_address0),
    .ce0(w1_12_ce0),
    .q0(w1_12_q0)
);

feedforward_w1_13 #(
    .DataWidth( 32 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
w1_13_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w1_13_address0),
    .ce0(w1_13_ce0),
    .q0(w1_13_q0)
);

feedforward_w1_14 #(
    .DataWidth( 32 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
w1_14_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w1_14_address0),
    .ce0(w1_14_ce0),
    .q0(w1_14_q0)
);

feedforward_w1_15 #(
    .DataWidth( 32 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
w1_15_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w1_15_address0),
    .ce0(w1_15_ce0),
    .q0(w1_15_q0)
);

feedforward_b1 #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
b1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(b1_address0),
    .ce0(b1_ce0),
    .q0(b1_q0)
);

feedforward_w2_0 #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
w2_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w2_0_address0),
    .ce0(w2_0_ce0),
    .q0(w2_0_q0)
);

feedforward_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

feedforward_l1y #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
l1y_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(l1y_address0),
    .ce0(l1y_ce0),
    .we0(l1y_we0),
    .d0(l1y_d0),
    .q0(l1y_q0)
);

feedforward_wy_sum #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
wy_sum_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(wy_sum_address0),
    .ce0(wy_sum_ce0),
    .we0(wy_sum_we0),
    .d0(wy_sum_d0),
    .q0(wy_sum_q0),
    .address1(wy_sum_address1),
    .ce1(wy_sum_ce1),
    .we1(wy_sum_we1),
    .d1(wy_sum_d1),
    .q1(wy_sum_q1)
);

feedforward_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_641_p0),
    .din1(grp_fu_641_p1),
    .ce(1'b1),
    .dout(grp_fu_641_p2)
);

feedforward_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_645_p0),
    .din1(grp_fu_645_p1),
    .ce(1'b1),
    .dout(grp_fu_645_p2)
);

feedforward_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_763),
    .din1(mul_12_reg_1369),
    .ce(1'b1),
    .dout(grp_fu_649_p2)
);

feedforward_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_743),
    .din1(mul_13_reg_1374),
    .ce(1'b1),
    .dout(grp_fu_653_p2)
);

feedforward_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_750),
    .din1(mul_14_reg_1379),
    .ce(1'b1),
    .dout(grp_fu_657_p2)
);

feedforward_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_664_p0),
    .din1(grp_fu_664_p1),
    .ce(1'b1),
    .dout(grp_fu_664_p2)
);

feedforward_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(w1_1_load_reg_1209),
    .din1(empty_18_fu_874_p1),
    .ce(1'b1),
    .dout(grp_fu_668_p2)
);

feedforward_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(w1_2_load_reg_1214),
    .din1(empty_18_fu_874_p1),
    .ce(1'b1),
    .dout(grp_fu_672_p2)
);

feedforward_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(w1_3_load_reg_1219),
    .din1(empty_18_fu_874_p1),
    .ce(1'b1),
    .dout(grp_fu_676_p2)
);

feedforward_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(w1_4_load_reg_1224),
    .din1(empty_18_fu_874_p1),
    .ce(1'b1),
    .dout(grp_fu_680_p2)
);

feedforward_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(w1_5_load_reg_1229),
    .din1(empty_18_fu_874_p1),
    .ce(1'b1),
    .dout(grp_fu_684_p2)
);

feedforward_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U12(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(w1_6_load_reg_1234),
    .din1(empty_18_fu_874_p1),
    .ce(1'b1),
    .dout(grp_fu_688_p2)
);

feedforward_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U13(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(w1_7_load_reg_1239),
    .din1(empty_18_fu_874_p1),
    .ce(1'b1),
    .dout(grp_fu_692_p2)
);

feedforward_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U14(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(w1_8_load_reg_1244),
    .din1(empty_18_fu_874_p1),
    .ce(1'b1),
    .dout(grp_fu_696_p2)
);

feedforward_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U15(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(w1_9_load_reg_1249),
    .din1(empty_18_fu_874_p1),
    .ce(1'b1),
    .dout(grp_fu_700_p2)
);

feedforward_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U16(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(w1_10_load_reg_1254),
    .din1(empty_18_fu_874_p1),
    .ce(1'b1),
    .dout(grp_fu_704_p2)
);

feedforward_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U17(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(w1_11_load_reg_1259),
    .din1(empty_18_fu_874_p1),
    .ce(1'b1),
    .dout(grp_fu_708_p2)
);

feedforward_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U18(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(w1_12_load_reg_1264),
    .din1(empty_18_fu_874_p1),
    .ce(1'b1),
    .dout(grp_fu_712_p2)
);

feedforward_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U19(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(w1_13_load_reg_1269),
    .din1(empty_18_fu_874_p1),
    .ce(1'b1),
    .dout(grp_fu_716_p2)
);

feedforward_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U20(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(w1_14_load_reg_1274),
    .din1(empty_18_fu_874_p1),
    .ce(1'b1),
    .dout(grp_fu_720_p2)
);

feedforward_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U21(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(w1_15_load_reg_1279),
    .din1(empty_18_fu_874_p1),
    .ce(1'b1),
    .dout(grp_fu_724_p2)
);

feedforward_fdiv_32ns_32ns_32_16_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_16_no_dsp_1_U22(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(32'd1065353216),
    .din1(reg_774),
    .ce(1'b1),
    .dout(grp_fu_728_p2)
);

feedforward_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U23(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_774),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_733_p2)
);

feedforward_fexp_32ns_32ns_32_9_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fexp_32ns_32ns_32_9_full_dsp_1_U24(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(32'd0),
    .din1(grp_fu_738_p1),
    .ce(1'b1),
    .dout(grp_fu_738_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state6) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp2_stage5_subdone) & (ap_enable_reg_pp2_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp2_stage5)) | ((1'b0 == ap_block_pp2_stage15_subdone) & (1'b1 == ap_CS_fsm_pp2_stage15)))) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_condition_pp4_exit_iter0_state41) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state40)) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp4_iter0 == 1'b0) & (1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp4_stage9_subdone) & (1'b1 == ap_CS_fsm_pp4_stage9)))) begin
            ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
        end else if ((1'b1 == ap_CS_fsm_state40)) begin
            ap_enable_reg_pp4_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_14_reg_587 <= 5'd0;
    end else if (((exitcond188_fu_830_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        empty_14_reg_587 <= empty_15_fu_824_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        empty_20_reg_631 <= bitcast_ln41_fu_961_p1;
    end else if (((ap_enable_reg_pp4_iter1 == 1'b1) & (icmp_ln39_reg_1487 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        empty_20_reg_631 <= grp_fu_641_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond199_fu_813_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_reg_576 <= empty_12_fu_807_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_reg_576 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        i_1_reg_620 <= 5'd0;
    end else if (((ap_enable_reg_pp4_iter1 == 1'b1) & (icmp_ln39_reg_1487 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        i_1_reg_620 <= add_ln39_reg_1482;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_reg_598 <= 4'd0;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln26_reg_1110 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        i_reg_598 <= add_ln26_reg_1105;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        o_reg_609 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        o_reg_609 <= add_ln33_reg_1439;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_1110 == 1'd0) & (1'b0 == ap_block_pp2_stage10_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage10))) begin
        reg_743 <= wy_sum_q0;
    end else if (((1'b1 == ap_CS_fsm_state30) | ((icmp_ln26_reg_1110 == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1)))) begin
        reg_743 <= wy_sum_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_1110 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        if (((1'b0 == ap_block_pp2_stage10_11001) & (1'b1 == ap_CS_fsm_pp2_stage10))) begin
            reg_750 <= wy_sum_q1;
        end else if (((1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            reg_750 <= wy_sum_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_1110 == 1'd0) & (1'b0 == ap_block_pp2_stage10_11001) & (1'b1 == ap_CS_fsm_pp2_stage10))) begin
        add_12_reg_1419 <= grp_fu_649_p2;
        add_13_reg_1424 <= grp_fu_653_p2;
        add_14_reg_1429 <= grp_fu_657_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        add_ln26_reg_1105 <= add_ln26_fu_841_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        add_ln33_reg_1439 <= add_ln33_fu_893_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        add_ln39_reg_1482 <= add_ln39_fu_965_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln26_reg_1110 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        add_s_reg_1434 <= grp_fu_645_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        b1_load_reg_1462 <= b1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        div_i_reg_1526 <= grp_fu_728_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln26_reg_1110 <= icmp_ln26_fu_847_p2;
        icmp_ln26_reg_1110_pp2_iter1_reg <= icmp_ln26_reg_1110;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        icmp_ln39_reg_1487 <= icmp_ln39_fu_971_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_reg_1487 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage1_11001) & (1'b1 == ap_CS_fsm_pp4_stage1))) begin
        l1y_load_reg_1506 <= l1y_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_1110 == 1'd0) & (1'b0 == ap_block_pp2_stage5_11001) & (1'b1 == ap_CS_fsm_pp2_stage5))) begin
        mul_10_reg_1359 <= grp_fu_708_p2;
        mul_11_reg_1364 <= grp_fu_712_p2;
        mul_12_reg_1369 <= grp_fu_716_p2;
        mul_13_reg_1374 <= grp_fu_720_p2;
        mul_14_reg_1379 <= grp_fu_724_p2;
        mul_1_reg_1309 <= grp_fu_668_p2;
        mul_2_reg_1314 <= grp_fu_672_p2;
        mul_3_reg_1319 <= grp_fu_676_p2;
        mul_4_reg_1324 <= grp_fu_680_p2;
        mul_5_reg_1329 <= grp_fu_684_p2;
        mul_6_reg_1334 <= grp_fu_688_p2;
        mul_7_reg_1339 <= grp_fu_692_p2;
        mul_8_reg_1344 <= grp_fu_696_p2;
        mul_9_reg_1349 <= grp_fu_700_p2;
        mul_s_reg_1354 <= grp_fu_704_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln26_reg_1110 == 1'd0) & (1'b0 == ap_block_pp2_stage11_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage11)) | ((icmp_ln26_reg_1110 == 1'd0) & (1'b0 == ap_block_pp2_stage2_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2)))) begin
        reg_757 <= wy_sum_q0;
        reg_763 <= wy_sum_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln39_reg_1487 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage5_11001) & (1'b1 == ap_CS_fsm_pp4_stage5)) | ((icmp_ln26_reg_1110 == 1'd0) & (1'b0 == ap_block_pp2_stage5_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage5)))) begin
        reg_769 <= grp_fu_664_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state35) | ((ap_enable_reg_pp4_iter1 == 1'b1) & (icmp_ln39_reg_1487 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((icmp_ln26_reg_1110 == 1'd0) & (1'b0 == ap_block_pp2_stage15_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage15)) | ((icmp_ln26_reg_1110 == 1'd0) & (1'b0 == ap_block_pp2_stage13_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage13)) | ((icmp_ln26_reg_1110 == 1'd0) & (1'b0 == ap_block_pp2_stage10_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage10)))) begin
        reg_774 <= grp_fu_641_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln26_reg_1110 == 1'd0) & (1'b0 == ap_block_pp2_stage14_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage14)) | ((icmp_ln26_reg_1110 == 1'd0) & (1'b0 == ap_block_pp2_stage12_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage12)) | ((icmp_ln26_reg_1110 == 1'd0) & (1'b0 == ap_block_pp2_stage10_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage10)))) begin
        reg_783 <= grp_fu_645_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln26_reg_1110 == 1'd0) & (1'b0 == ap_block_pp2_stage14_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage14)) | ((icmp_ln26_reg_1110 == 1'd0) & (1'b0 == ap_block_pp2_stage11_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage11)))) begin
        reg_789 <= grp_fu_641_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln26_reg_1110 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((icmp_ln26_reg_1110 == 1'd0) & (1'b0 == ap_block_pp2_stage12_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage12)))) begin
        reg_795 <= grp_fu_641_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln26_reg_1110 == 1'd0) & (1'b0 == ap_block_pp2_stage15_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage15)) | ((icmp_ln26_reg_1110 == 1'd0) & (1'b0 == ap_block_pp2_stage13_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage13)))) begin
        reg_801 <= grp_fu_645_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        select_ln9_reg_1467 <= select_ln9_fu_953_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        tmp_reg_1521 <= grp_fu_738_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_1110 == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        w1_0_load_reg_1204 <= w1_0_q0;
        w1_10_load_reg_1254 <= w1_10_q0;
        w1_11_load_reg_1259 <= w1_11_q0;
        w1_12_load_reg_1264 <= w1_12_q0;
        w1_13_load_reg_1269 <= w1_13_q0;
        w1_14_load_reg_1274 <= w1_14_q0;
        w1_15_load_reg_1279 <= w1_15_q0;
        w1_1_load_reg_1209 <= w1_1_q0;
        w1_2_load_reg_1214 <= w1_2_q0;
        w1_3_load_reg_1219 <= w1_3_q0;
        w1_4_load_reg_1224 <= w1_4_q0;
        w1_5_load_reg_1229 <= w1_5_q0;
        w1_6_load_reg_1234 <= w1_6_q0;
        w1_7_load_reg_1239 <= w1_7_q0;
        w1_8_load_reg_1244 <= w1_8_q0;
        w1_9_load_reg_1249 <= w1_9_q0;
        x_load_reg_1199 <= x_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_reg_1487 == 1'd0) & (1'b0 == ap_block_pp4_stage1_11001) & (1'b1 == ap_CS_fsm_pp4_stage1))) begin
        w2_0_load_reg_1501 <= w2_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_1110 == 1'd0) & (1'b0 == ap_block_pp2_stage3_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage3))) begin
        wy_sum_load_12_reg_1304 <= wy_sum_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_1110 == 1'd0) & (1'b0 == ap_block_pp2_stage6_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage6))) begin
        wy_sum_load_2_reg_1384 <= wy_sum_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_1110 == 1'd0) & (1'b0 == ap_block_pp2_stage7_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage7))) begin
        wy_sum_load_3_reg_1389 <= wy_sum_q0;
        wy_sum_load_4_reg_1394 <= wy_sum_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_1110 == 1'd0) & (1'b0 == ap_block_pp2_stage8_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage8))) begin
        wy_sum_load_5_reg_1399 <= wy_sum_q0;
        wy_sum_load_6_reg_1404 <= wy_sum_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_1110 == 1'd0) & (1'b0 == ap_block_pp2_stage9_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage9))) begin
        wy_sum_load_7_reg_1409 <= wy_sum_q0;
        wy_sum_load_8_reg_1414 <= wy_sum_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        xor_ln13_reg_1511 <= xor_ln13_fu_987_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_899_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state29))) begin
        zext_ln33_reg_1447[4 : 0] <= zext_ln33_fu_905_p1[4 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln26_fu_847_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln39_fu_971_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state41 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state41 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b1) & (icmp_ln39_reg_1487 == 1'd0) & (1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        ap_phi_mux_i_1_phi_fu_624_p4 = add_ln39_reg_1482;
    end else begin
        ap_phi_mux_i_1_phi_fu_624_p4 = i_1_reg_620;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln26_reg_1110 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_i_phi_fu_602_p4 = add_ln26_reg_1105;
    end else begin
        ap_phi_mux_i_phi_fu_602_p4 = i_reg_598;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        b1_ce0 = 1'b1;
    end else begin
        b1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        grp_fu_641_p0 = tmp_reg_1521;
    end else if (((1'b1 == ap_CS_fsm_state52) | ((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage6) & (1'b1 == ap_CS_fsm_pp4_stage6)))) begin
        grp_fu_641_p0 = empty_20_reg_631;
    end else if (((1'b0 == ap_block_pp2_stage12) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage12))) begin
        grp_fu_641_p0 = reg_757;
    end else if (((1'b1 == ap_CS_fsm_state31) | ((1'b0 == ap_block_pp2_stage11) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage11)))) begin
        grp_fu_641_p0 = reg_743;
    end else if (((1'b0 == ap_block_pp2_stage10) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage10))) begin
        grp_fu_641_p0 = wy_sum_load_7_reg_1409;
    end else if (((1'b0 == ap_block_pp2_stage9) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage9))) begin
        grp_fu_641_p0 = wy_sum_load_5_reg_1399;
    end else if (((1'b0 == ap_block_pp2_stage8) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage8))) begin
        grp_fu_641_p0 = wy_sum_load_3_reg_1389;
    end else if (((1'b0 == ap_block_pp2_stage7) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage7))) begin
        grp_fu_641_p0 = wy_sum_load_2_reg_1384;
    end else if (((1'b0 == ap_block_pp2_stage6) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage6))) begin
        grp_fu_641_p0 = wy_sum_load_12_reg_1304;
    end else begin
        grp_fu_641_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        grp_fu_641_p1 = 32'd1065353216;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        grp_fu_641_p1 = 32'd1021279335;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_fu_641_p1 = b1_load_reg_1462;
    end else if ((((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage6) & (1'b1 == ap_CS_fsm_pp4_stage6)) | ((1'b0 == ap_block_pp2_stage12) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage12)))) begin
        grp_fu_641_p1 = reg_769;
    end else if (((1'b0 == ap_block_pp2_stage11) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage11))) begin
        grp_fu_641_p1 = mul_8_reg_1344;
    end else if (((1'b0 == ap_block_pp2_stage10) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage10))) begin
        grp_fu_641_p1 = mul_6_reg_1334;
    end else if (((1'b0 == ap_block_pp2_stage9) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage9))) begin
        grp_fu_641_p1 = mul_4_reg_1324;
    end else if (((1'b0 == ap_block_pp2_stage8) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage8))) begin
        grp_fu_641_p1 = mul_2_reg_1314;
    end else if (((1'b0 == ap_block_pp2_stage7) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage7))) begin
        grp_fu_641_p1 = mul_1_reg_1309;
    end else if (((1'b0 == ap_block_pp2_stage6) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage6))) begin
        grp_fu_641_p1 = mul_10_reg_1359;
    end else begin
        grp_fu_641_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp2_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp2_stage12) & (1'b1 == ap_CS_fsm_pp2_stage12))) begin
            grp_fu_645_p0 = reg_763;
        end else if (((1'b0 == ap_block_pp2_stage11) & (1'b1 == ap_CS_fsm_pp2_stage11))) begin
            grp_fu_645_p0 = reg_750;
        end else if (((1'b0 == ap_block_pp2_stage10) & (1'b1 == ap_CS_fsm_pp2_stage10))) begin
            grp_fu_645_p0 = wy_sum_load_8_reg_1414;
        end else if (((1'b0 == ap_block_pp2_stage9) & (1'b1 == ap_CS_fsm_pp2_stage9))) begin
            grp_fu_645_p0 = wy_sum_load_6_reg_1404;
        end else if (((1'b0 == ap_block_pp2_stage8) & (1'b1 == ap_CS_fsm_pp2_stage8))) begin
            grp_fu_645_p0 = wy_sum_load_4_reg_1394;
        end else if (((1'b0 == ap_block_pp2_stage6) & (1'b1 == ap_CS_fsm_pp2_stage6))) begin
            grp_fu_645_p0 = reg_757;
        end else begin
            grp_fu_645_p0 = 'bx;
        end
    end else begin
        grp_fu_645_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp2_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp2_stage12) & (1'b1 == ap_CS_fsm_pp2_stage12))) begin
            grp_fu_645_p1 = mul_s_reg_1354;
        end else if (((1'b0 == ap_block_pp2_stage11) & (1'b1 == ap_CS_fsm_pp2_stage11))) begin
            grp_fu_645_p1 = mul_9_reg_1349;
        end else if (((1'b0 == ap_block_pp2_stage10) & (1'b1 == ap_CS_fsm_pp2_stage10))) begin
            grp_fu_645_p1 = mul_7_reg_1339;
        end else if (((1'b0 == ap_block_pp2_stage9) & (1'b1 == ap_CS_fsm_pp2_stage9))) begin
            grp_fu_645_p1 = mul_5_reg_1329;
        end else if (((1'b0 == ap_block_pp2_stage8) & (1'b1 == ap_CS_fsm_pp2_stage8))) begin
            grp_fu_645_p1 = mul_3_reg_1319;
        end else if (((1'b0 == ap_block_pp2_stage6) & (1'b1 == ap_CS_fsm_pp2_stage6))) begin
            grp_fu_645_p1 = mul_11_reg_1364;
        end else begin
            grp_fu_645_p1 = 'bx;
        end
    end else begin
        grp_fu_645_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage2) & (1'b1 == ap_CS_fsm_pp4_stage2))) begin
        grp_fu_664_p0 = w2_0_load_reg_1501;
    end else if (((1'b0 == ap_block_pp2_stage2) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
        grp_fu_664_p0 = w1_0_load_reg_1204;
    end else begin
        grp_fu_664_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage2) & (1'b1 == ap_CS_fsm_pp4_stage2))) begin
        grp_fu_664_p1 = l1y_load_reg_1506;
    end else if (((1'b0 == ap_block_pp2_stage2) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
        grp_fu_664_p1 = empty_18_fu_874_p1;
    end else begin
        grp_fu_664_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        l1y_address0 = zext_ln39_fu_977_p1;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        l1y_address0 = zext_ln33_reg_1447;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        l1y_address0 = p_cast_fu_819_p1;
    end else begin
        l1y_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state2) | ((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0)))) begin
        l1y_ce0 = 1'b1;
    end else begin
        l1y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        l1y_d0 = select_ln9_reg_1467;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        l1y_d0 = 32'd0;
    end else begin
        l1y_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | ((exitcond199_fu_813_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        l1y_we0 = 1'b1;
    end else begin
        l1y_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        w1_0_ce0 = 1'b1;
    end else begin
        w1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        w1_10_ce0 = 1'b1;
    end else begin
        w1_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        w1_11_ce0 = 1'b1;
    end else begin
        w1_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        w1_12_ce0 = 1'b1;
    end else begin
        w1_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        w1_13_ce0 = 1'b1;
    end else begin
        w1_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        w1_14_ce0 = 1'b1;
    end else begin
        w1_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        w1_15_ce0 = 1'b1;
    end else begin
        w1_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        w1_1_ce0 = 1'b1;
    end else begin
        w1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        w1_2_ce0 = 1'b1;
    end else begin
        w1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        w1_3_ce0 = 1'b1;
    end else begin
        w1_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        w1_4_ce0 = 1'b1;
    end else begin
        w1_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        w1_5_ce0 = 1'b1;
    end else begin
        w1_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        w1_6_ce0 = 1'b1;
    end else begin
        w1_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        w1_7_ce0 = 1'b1;
    end else begin
        w1_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        w1_8_ce0 = 1'b1;
    end else begin
        w1_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        w1_9_ce0 = 1'b1;
    end else begin
        w1_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        w2_0_ce0 = 1'b1;
    end else begin
        w2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage4) & (1'b1 == ap_CS_fsm_pp2_stage4))) begin
        wy_sum_address0 = 64'd9;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage3) & (1'b1 == ap_CS_fsm_pp2_stage3))) begin
        wy_sum_address0 = 64'd7;
    end else if (((1'b0 == ap_block_pp2_stage11) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage11))) begin
        wy_sum_address0 = 64'd14;
    end else if (((1'b0 == ap_block_pp2_stage10) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage10))) begin
        wy_sum_address0 = 64'd0;
    end else if (((1'b0 == ap_block_pp2_stage9) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage9))) begin
        wy_sum_address0 = 64'd8;
    end else if (((1'b0 == ap_block_pp2_stage8) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage8))) begin
        wy_sum_address0 = 64'd6;
    end else if ((((1'b0 == ap_block_pp2_stage7) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage7)) | ((1'b0 == ap_block_pp2_stage15) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage15)))) begin
        wy_sum_address0 = 64'd4;
    end else if ((((1'b0 == ap_block_pp2_stage6) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage6)) | ((1'b0 == ap_block_pp2_stage14) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage14)))) begin
        wy_sum_address0 = 64'd2;
    end else if ((((1'b0 == ap_block_pp2_stage5) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage5)) | ((1'b0 == ap_block_pp2_stage13) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage13)))) begin
        wy_sum_address0 = 64'd1;
    end else if (((1'b0 == ap_block_pp2_stage2) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
        wy_sum_address0 = 64'd11;
    end else if ((((1'b0 == ap_block_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((1'b0 == ap_block_pp2_stage12) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage12)))) begin
        wy_sum_address0 = 64'd12;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        wy_sum_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        wy_sum_address0 = p_cast1_fu_836_p1;
    end else begin
        wy_sum_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        wy_sum_address1 = zext_ln33_fu_905_p1;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage5) & (1'b1 == ap_CS_fsm_pp2_stage5))) begin
        wy_sum_address1 = 64'd0;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage3) & (1'b1 == ap_CS_fsm_pp2_stage3))) begin
        wy_sum_address1 = 64'd8;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage2) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
        wy_sum_address1 = 64'd6;
    end else if (((1'b0 == ap_block_pp2_stage13) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage13))) begin
        wy_sum_address1 = 64'd11;
    end else if (((1'b0 == ap_block_pp2_stage11) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage11))) begin
        wy_sum_address1 = 64'd15;
    end else if ((((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage4) & (1'b1 == ap_CS_fsm_pp2_stage4)) | ((1'b0 == ap_block_pp2_stage10) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage10)))) begin
        wy_sum_address1 = 64'd10;
    end else if (((1'b0 == ap_block_pp2_stage9) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage9))) begin
        wy_sum_address1 = 64'd9;
    end else if (((1'b0 == ap_block_pp2_stage8) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage8))) begin
        wy_sum_address1 = 64'd7;
    end else if ((((1'b0 == ap_block_pp2_stage7) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage7)) | ((1'b0 == ap_block_pp2_stage15) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage15)))) begin
        wy_sum_address1 = 64'd5;
    end else if ((((1'b0 == ap_block_pp2_stage6) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage6)) | ((1'b0 == ap_block_pp2_stage14) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage14)))) begin
        wy_sum_address1 = 64'd3;
    end else if ((((1'b0 == ap_block_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((1'b0 == ap_block_pp2_stage12) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage12)))) begin
        wy_sum_address1 = 64'd13;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        wy_sum_address1 = 64'd14;
    end else begin
        wy_sum_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b0 == ap_block_pp2_stage9_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage9)) | ((1'b0 == ap_block_pp2_stage8_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage8)) | ((1'b0 == ap_block_pp2_stage7_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage7)) | ((1'b0 == ap_block_pp2_stage6_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage6)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage3_11001) & (1'b1 == ap_CS_fsm_pp2_stage3)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage4_11001) & (1'b1 == ap_CS_fsm_pp2_stage4)) | ((1'b0 == ap_block_pp2_stage14_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage14)) | ((1'b0 == ap_block_pp2_stage12_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage12)) | ((1'b0 == ap_block_pp2_stage15_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage15)) | ((1'b0 == ap_block_pp2_stage13_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage13)) | ((1'b0 == ap_block_pp2_stage5_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage5)) | ((1'b0 == ap_block_pp2_stage11_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage11)) | ((1'b0 == ap_block_pp2_stage2_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2)) | ((1'b0 == ap_block_pp2_stage10_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage10)) | ((1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1)))) begin
        wy_sum_ce0 = 1'b1;
    end else begin
        wy_sum_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | ((1'b0 == ap_block_pp2_stage9_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage9)) | ((1'b0 == ap_block_pp2_stage8_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage8)) | ((1'b0 == ap_block_pp2_stage7_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage7)) | ((1'b0 == ap_block_pp2_stage6_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage6)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage3_11001) & (1'b1 == ap_CS_fsm_pp2_stage3)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage5_11001) & (1'b1 == ap_CS_fsm_pp2_stage5)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage2_11001) & (1'b1 == ap_CS_fsm_pp2_stage2)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage4_11001) & (1'b1 == ap_CS_fsm_pp2_stage4)) | ((1'b0 == ap_block_pp2_stage14_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage14)) | ((1'b0 == ap_block_pp2_stage12_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage12)) | ((1'b0 == ap_block_pp2_stage15_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage15)) | ((1'b0 == ap_block_pp2_stage13_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage13)) | ((1'b0 == ap_block_pp2_stage11_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage11)) | ((1'b0 == ap_block_pp2_stage10_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage10)) | ((1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1)))) begin
        wy_sum_ce1 = 1'b1;
    end else begin
        wy_sum_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage4) & (1'b1 == ap_CS_fsm_pp2_stage4))) begin
        wy_sum_d0 = reg_801;
    end else if (((1'b0 == ap_block_pp2_stage15) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage15))) begin
        wy_sum_d0 = reg_774;
    end else if (((1'b0 == ap_block_pp2_stage14) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage14))) begin
        wy_sum_d0 = reg_795;
    end else if (((1'b0 == ap_block_pp2_stage13) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage13))) begin
        wy_sum_d0 = reg_789;
    end else if ((((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage3) & (1'b1 == ap_CS_fsm_pp2_stage3)) | ((1'b0 == ap_block_pp2_stage12) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage12)))) begin
        wy_sum_d0 = reg_783;
    end else if (((1'b0 == ap_block_pp2_stage11) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage11))) begin
        wy_sum_d0 = add_13_reg_1424;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        wy_sum_d0 = 32'd0;
    end else begin
        wy_sum_d0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage5) & (1'b1 == ap_CS_fsm_pp2_stage5))) begin
        wy_sum_d1 = reg_795;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage4) & (1'b1 == ap_CS_fsm_pp2_stage4))) begin
        wy_sum_d1 = add_s_reg_1434;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage2) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
        wy_sum_d1 = reg_789;
    end else if (((1'b0 == ap_block_pp2_stage15) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage15))) begin
        wy_sum_d1 = reg_801;
    end else if (((1'b0 == ap_block_pp2_stage14) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage14))) begin
        wy_sum_d1 = reg_783;
    end else if ((((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage3) & (1'b1 == ap_CS_fsm_pp2_stage3)) | ((1'b0 == ap_block_pp2_stage13) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage13)))) begin
        wy_sum_d1 = reg_774;
    end else if (((1'b0 == ap_block_pp2_stage12) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage12))) begin
        wy_sum_d1 = add_12_reg_1419;
    end else if (((1'b0 == ap_block_pp2_stage11) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage11))) begin
        wy_sum_d1 = add_14_reg_1429;
    end else begin
        wy_sum_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((exitcond188_fu_830_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((icmp_ln26_reg_1110 == 1'd0) & (1'b0 == ap_block_pp2_stage14_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage14)) | ((icmp_ln26_reg_1110 == 1'd0) & (1'b0 == ap_block_pp2_stage12_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage12)) | ((icmp_ln26_reg_1110 == 1'd0) & (1'b0 == ap_block_pp2_stage15_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage15)) | ((icmp_ln26_reg_1110 == 1'd0) & (1'b0 == ap_block_pp2_stage13_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage13)) | ((icmp_ln26_reg_1110 == 1'd0) & (1'b0 == ap_block_pp2_stage11_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage11)) | ((icmp_ln26_reg_1110_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage3_11001) & (1'b1 == ap_CS_fsm_pp2_stage3)) | ((icmp_ln26_reg_1110_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage4_11001) & (1'b1 == ap_CS_fsm_pp2_stage4)))) begin
        wy_sum_we0 = 1'b1;
    end else begin
        wy_sum_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln26_reg_1110 == 1'd0) & (1'b0 == ap_block_pp2_stage14_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage14)) | ((icmp_ln26_reg_1110 == 1'd0) & (1'b0 == ap_block_pp2_stage12_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage12)) | ((icmp_ln26_reg_1110 == 1'd0) & (1'b0 == ap_block_pp2_stage15_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage15)) | ((icmp_ln26_reg_1110 == 1'd0) & (1'b0 == ap_block_pp2_stage13_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage13)) | ((icmp_ln26_reg_1110 == 1'd0) & (1'b0 == ap_block_pp2_stage11_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage11)) | ((icmp_ln26_reg_1110_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage3_11001) & (1'b1 == ap_CS_fsm_pp2_stage3)) | ((icmp_ln26_reg_1110_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage5_11001) & (1'b1 == ap_CS_fsm_pp2_stage5)) | ((icmp_ln26_reg_1110_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage2_11001) & (1'b1 == ap_CS_fsm_pp2_stage2)) | ((icmp_ln26_reg_1110_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage4_11001) & (1'b1 == ap_CS_fsm_pp2_stage4)))) begin
        wy_sum_we1 = 1'b1;
    end else begin
        wy_sum_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        x_EN_A = 1'b1;
    end else begin
        x_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        y_Addr_A_orig = y_addr_reg_1472;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        y_Addr_A_orig = 64'd0;
    end else begin
        y_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state88))) begin
        y_EN_A = 1'b1;
    end else begin
        y_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        y_WEN_A = 4'd15;
    end else begin
        y_WEN_A = 4'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond199_fu_813_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond188_fu_830_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((icmp_ln26_fu_847_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1)) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else if (((icmp_ln26_fu_847_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if ((1'b0 == ap_block_pp2_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_pp2_stage2 : begin
            if ((1'b0 == ap_block_pp2_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage2;
            end
        end
        ap_ST_fsm_pp2_stage3 : begin
            if ((1'b0 == ap_block_pp2_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage3;
            end
        end
        ap_ST_fsm_pp2_stage4 : begin
            if ((1'b0 == ap_block_pp2_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage4;
            end
        end
        ap_ST_fsm_pp2_stage5 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage5_subdone) & (ap_enable_reg_pp2_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp2_stage5)) & (1'b0 == ap_block_pp2_stage5_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage6;
            end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage5_subdone) & (ap_enable_reg_pp2_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp2_stage5))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage5;
            end
        end
        ap_ST_fsm_pp2_stage6 : begin
            if ((1'b0 == ap_block_pp2_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage6;
            end
        end
        ap_ST_fsm_pp2_stage7 : begin
            if ((1'b0 == ap_block_pp2_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage7;
            end
        end
        ap_ST_fsm_pp2_stage8 : begin
            if ((1'b0 == ap_block_pp2_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage8;
            end
        end
        ap_ST_fsm_pp2_stage9 : begin
            if ((1'b0 == ap_block_pp2_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage9;
            end
        end
        ap_ST_fsm_pp2_stage10 : begin
            if ((1'b0 == ap_block_pp2_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage10;
            end
        end
        ap_ST_fsm_pp2_stage11 : begin
            if ((1'b0 == ap_block_pp2_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage11;
            end
        end
        ap_ST_fsm_pp2_stage12 : begin
            if ((1'b0 == ap_block_pp2_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage12;
            end
        end
        ap_ST_fsm_pp2_stage13 : begin
            if ((1'b0 == ap_block_pp2_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage13;
            end
        end
        ap_ST_fsm_pp2_stage14 : begin
            if ((1'b0 == ap_block_pp2_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage14;
            end
        end
        ap_ST_fsm_pp2_stage15 : begin
            if ((1'b0 == ap_block_pp2_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage15;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            if (((icmp_ln33_fu_899_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_pp4_stage0;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((icmp_ln39_fu_971_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage1;
            end else if (((icmp_ln39_fu_971_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_pp4_stage1 : begin
            if ((1'b0 == ap_block_pp4_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage1;
            end
        end
        ap_ST_fsm_pp4_stage2 : begin
            if ((1'b0 == ap_block_pp4_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage2;
            end
        end
        ap_ST_fsm_pp4_stage3 : begin
            if ((1'b0 == ap_block_pp4_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage3;
            end
        end
        ap_ST_fsm_pp4_stage4 : begin
            if ((1'b0 == ap_block_pp4_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage4;
            end
        end
        ap_ST_fsm_pp4_stage5 : begin
            if ((1'b0 == ap_block_pp4_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage5;
            end
        end
        ap_ST_fsm_pp4_stage6 : begin
            if ((1'b0 == ap_block_pp4_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage6;
            end
        end
        ap_ST_fsm_pp4_stage7 : begin
            if ((1'b0 == ap_block_pp4_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage7;
            end
        end
        ap_ST_fsm_pp4_stage8 : begin
            if ((1'b0 == ap_block_pp4_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage8;
            end
        end
        ap_ST_fsm_pp4_stage9 : begin
            if ((1'b0 == ap_block_pp4_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage9;
            end
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln26_fu_841_p2 = (ap_phi_mux_i_phi_fu_602_p4 + 4'd1);

assign add_ln33_fu_893_p2 = (o_reg_609 + 5'd1);

assign add_ln39_fu_965_p2 = (ap_phi_mux_i_1_phi_fu_624_p4 + 5'd1);

assign and_ln9_fu_947_p2 = (or_ln9_fu_941_p2 & grp_fu_733_p2);

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp2_stage10 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp2_stage11 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp2_stage12 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp2_stage13 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp2_stage14 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp2_stage15 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp2_stage2 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp2_stage3 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp2_stage4 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp2_stage5 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp2_stage6 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp2_stage7 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp2_stage8 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp2_stage9 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_pp4_stage1 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_pp4_stage2 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_pp4_stage5 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_pp4_stage6 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_pp4_stage9 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd80];

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage10 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage12 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage12_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage12_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage13 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage13_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage13_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage14 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage14_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage14_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage15 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage15_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage15_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp2_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp2_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp2_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp2_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp2_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp2_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp2_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp2_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp2_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp2_stage13_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp2_stage14_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp2_stage15_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp2_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp2_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp2_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp2_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp2_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp4_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp4_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp4_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp4_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp4_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp4_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp4_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp4_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp4_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp2_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp2_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp2_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b1_address0 = zext_ln33_fu_905_p1;

assign bitcast_ln13_fu_983_p1 = reg_774;

assign bitcast_ln41_fu_961_p1 = y_Dout_A;

assign bitcast_ln9_fu_911_p1 = reg_774;

assign empty_12_fu_807_p2 = (empty_reg_576 + 5'd1);

assign empty_15_fu_824_p2 = (empty_14_reg_587 + 5'd1);

assign empty_18_fu_874_p1 = x_load_reg_1199;

assign exitcond188_fu_830_p2 = ((empty_14_reg_587 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond199_fu_813_p2 = ((empty_reg_576 == 5'd16) ? 1'b1 : 1'b0);

assign grp_fu_738_p1 = xor_ln13_reg_1511;

assign icmp_ln26_fu_847_p2 = ((ap_phi_mux_i_phi_fu_602_p4 == 4'd11) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_899_p2 = ((o_reg_609 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_971_p2 = ((ap_phi_mux_i_1_phi_fu_624_p4 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln9_1_fu_935_p2 = ((trunc_ln9_fu_925_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_929_p2 = ((tmp_1_fu_915_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln9_fu_941_p2 = (icmp_ln9_fu_929_p2 | icmp_ln9_1_fu_935_p2);

assign p_cast1_fu_836_p1 = empty_14_reg_587;

assign p_cast_fu_819_p1 = empty_reg_576;

assign select_ln9_fu_953_p3 = ((and_ln9_fu_947_p2[0:0] == 1'b1) ? 32'd0 : reg_774);

assign tmp_1_fu_915_p4 = {{bitcast_ln9_fu_911_p1[30:23]}};

assign trunc_ln9_fu_925_p1 = bitcast_ln9_fu_911_p1[22:0];

assign w1_0_address0 = zext_ln26_fu_853_p1;

assign w1_10_address0 = zext_ln26_fu_853_p1;

assign w1_11_address0 = zext_ln26_fu_853_p1;

assign w1_12_address0 = zext_ln26_fu_853_p1;

assign w1_13_address0 = zext_ln26_fu_853_p1;

assign w1_14_address0 = zext_ln26_fu_853_p1;

assign w1_15_address0 = zext_ln26_fu_853_p1;

assign w1_1_address0 = zext_ln26_fu_853_p1;

assign w1_2_address0 = zext_ln26_fu_853_p1;

assign w1_3_address0 = zext_ln26_fu_853_p1;

assign w1_4_address0 = zext_ln26_fu_853_p1;

assign w1_5_address0 = zext_ln26_fu_853_p1;

assign w1_6_address0 = zext_ln26_fu_853_p1;

assign w1_7_address0 = zext_ln26_fu_853_p1;

assign w1_8_address0 = zext_ln26_fu_853_p1;

assign w1_9_address0 = zext_ln26_fu_853_p1;

assign w2_0_address0 = zext_ln39_fu_977_p1;

assign x_Addr_A = x_Addr_A_orig << 32'd2;

assign x_Addr_A_orig = zext_ln26_fu_853_p1;

assign x_Clk_A = ap_clk;

assign x_Din_A = 32'd0;

assign x_Rst_A = ap_rst_n_inv;

assign x_WEN_A = 4'd0;

assign xor_ln13_fu_987_p2 = (bitcast_ln13_fu_983_p1 ^ 32'd2147483648);

assign y_Addr_A = y_Addr_A_orig << 32'd2;

assign y_Clk_A = ap_clk;

assign y_Din_A = div_i_reg_1526;

assign y_Rst_A = ap_rst_n_inv;

assign y_addr_reg_1472 = 64'd0;

assign zext_ln26_fu_853_p1 = ap_phi_mux_i_phi_fu_602_p4;

assign zext_ln33_fu_905_p1 = o_reg_609;

assign zext_ln39_fu_977_p1 = ap_phi_mux_i_1_phi_fu_624_p4;

always @ (posedge ap_clk) begin
    zext_ln33_reg_1447[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //feedforward
