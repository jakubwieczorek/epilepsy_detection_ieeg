-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity feedforward_b1_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 72
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of feedforward_b1_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111010101001000101110101000010", 
    1 => "10111100011001110011111001101000", 
    2 => "10111011001010001001111111000111", 
    3 => "00111010100000000000111010101110", 
    4 => "10111010101001000111111011010000", 
    5 => "10111011000111010110101011011111", 
    6 => "10111011000011101100110110001110", 
    7 => "10111011100110111001110110000000", 
    8 => "00111101101101111010010101101110", 
    9 => "10111100001111101011111000010110", 
    10 => "10111011001111010001001001000101", 
    11 => "10111100110000011010110011011110", 
    12 => "10111100101110111101101111100100", 
    13 => "00111010110100001110110111000100", 
    14 => "10111011000011011111001101110011", 
    15 => "10111011000010111011100100000110", 
    16 => "10111011010100111001110110100001", 
    17 => "10111011000000110111011100011000", 
    18 => "00111110001001000100100010001100", 
    19 => "10111100000011001011010010101111", 
    20 => "10111001101111000011100000101010", 
    21 => "00111010110001000001010101101110", 
    22 => "10111100011010010001100001011101", 
    23 => "10111001111101010101110111100110", 
    24 => "00111110000100100010001010010010", 
    25 => "10111100000101101100001111111100", 
    26 => "00111101101111111010000000001110", 
    27 => "10111011110010110100101011101101", 
    28 => "10111100010001000011101100101110", 
    29 => "10111100111110100110000101011011", 
    30 => "10111100001001110111000111001001", 
    31 => "10111100010100101000110100000000", 
    32 => "10111001111110110010001001001011", 
    33 => "10111101010010111100010010001111", 
    34 => "10111010100111110001111100010101", 
    35 => "10111010100110000010110010110010", 
    36 => "10111010100010010111111010011001", 
    37 => "00111110001001011001010101111001", 
    38 => "10111011001001000010101011101101", 
    39 => "10111100010100011101100010100101", 
    40 => "10111011100111011001010011010001", 
    41 => "10111011010111001010100011100011", 
    42 => "10111010101000111001001111101110", 
    43 => "10111011011101100010011100111001", 
    44 => "00111010010100001110110111000100", 
    45 => "00111010010000000110100111101000", 
    46 => "00111001101011011000101000010001", 
    47 => "00111000110000001111000000100000", 
    48 => "10111011110011001010001011011011", 
    49 => "00111110000001100001100011001110", 
    50 => "00111010100001010010101101001110", 
    51 => "10111011000011000010111001110111", 
    52 => "10111011110011011010011011100111", 
    53 => "10111001100000101000110000110111", 
    54 => "00111010000001011011000110000101", 
    55 => "10111100111000001001111111101000", 
    56 => "10111011101011111000100111000110", 
    57 => "00111101100111001001000011000101", 
    58 => "10111011011010010000101111001000", 
    59 => "10111010101100110100111001110111", 
    60 => "00111110000011111111011101011001", 
    61 => "10111000110011111001111000111000", 
    62 => "10111100110001010111010111000000", 
    63 => "10111100001101001111011000010110", 
    64 => "10111010001000001011000110111100", 
    65 => "10111010100101110100000111010001", 
    66 => "10111011110001011010100000010101", 
    67 => "10111011000010110110010100100011", 
    68 => "10111100100001101101011100011111", 
    69 => "10111010001000010111101100001111", 
    70 => "10111010010011000011010111001110", 
    71 => "10111011101001010011111111000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity feedforward_b1 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 72;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of feedforward_b1 is
    component feedforward_b1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    feedforward_b1_rom_U :  component feedforward_b1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


