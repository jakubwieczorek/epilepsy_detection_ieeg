-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity feedforward_b1_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 72
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of feedforward_b1_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111010010011001011110000000110", 
    1 => "10111011011110111111110001100101", 
    2 => "10111101000100000111110010000101", 
    3 => "10111011101100110010010010000101", 
    4 => "10111010100011010110110100111011", 
    5 => "10111010011001111111111101011000", 
    6 => "10111010010101100010101111110001", 
    7 => "10111011110001011010100000010101", 
    8 => "10111011011100000101001000001101", 
    9 => "10111100001011000011101010000110", 
    10 => "10111011000011000110000011001100", 
    11 => "10111000111101110111011011000101", 
    12 => "10111011101110000000011001101100", 
    13 => "10111100111110110010111011100000", 
    14 => "10111010001111100000110111101101", 
    15 => "10111010001111110101110101111001", 
    16 => "10111011111111010100101111110001", 
    17 => "10111001111110010000100101101100", 
    18 => "10111010010101101111010101000101", 
    19 => "10111010101001110110000100000010", 
    20 => "10111011000110111000010001010101", 
    21 => "10111010100100001101010110100110", 
    22 => "10111001111000111000101001111110", 
    23 => "10111100000000110010101110011001", 
    24 => "10111011011000100011101011110011", 
    25 => "00111100011110011111110010110001", 
    26 => "10111010101101010000001010101100", 
    27 => "10111100100000010111010101001011", 
    28 => "10111101000011011010011011100111", 
    29 => "10111011000110000011110101111001", 
    30 => "00111011100101001011101111100100", 
    31 => "10111011110111110000010011011110", 
    32 => "10111001010010000100011100101100", 
    33 => "00111100101101110101010000101010", 
    34 => "10111011001011111100010001111110", 
    35 => "10111010110001111001111101100110", 
    36 => "10111100000110101111010110111010", 
    37 => "10111011001010010011011011000110", 
    38 => "10111100100011011001010100010100", 
    39 => "00111110001010011111101011011011", 
    40 => "10111011101101101010111001111101", 
    41 => "10111011001011101000010110111010", 
    42 => "10111010101111011000011110110101", 
    43 => "00111011111100100011100010010111", 
    44 => "00111110000111000011011001010100", 
    45 => "10111011000100011110001000010101", 
    46 => "10111011110101001111010110010000", 
    47 => "10111100100111000101100000100101", 
    48 => "10111100100000001000110010000010", 
    49 => "10111011100100111001011001001010", 
    50 => "10111010001011010100011011110110", 
    51 => "10111011001010100101001111111100", 
    52 => "00111101101100000001110010010011", 
    53 => "00111001010101001101110001100110", 
    54 => "10111100110010100111010100000100", 
    55 => "10111011100011111000011000011010", 
    56 => "10111100000000011010100110111001", 
    57 => "10111100100000000000010000110010", 
    58 => "10111011101111010000000101111110", 
    59 => "10111100001110001110100011101010", 
    60 => "10111100001111010000100111100001", 
    61 => "00111011000001001010010100010110", 
    62 => "10111011000011010101110001110100", 
    63 => "00111100011011001000110101011100", 
    64 => "10111011100100100111100100010100", 
    65 => "00111000000000100000010111111111", 
    66 => "10111011111111011001111111010011", 
    67 => "10111010111000110000010001000111", 
    68 => "10111011000111101100101100110010", 
    69 => "00111101110100001110100100001100", 
    70 => "00111100100000100101101111111011", 
    71 => "10111011010000010010001001110101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity feedforward_b1 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 72;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of feedforward_b1 is
    component feedforward_b1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    feedforward_b1_rom_U :  component feedforward_b1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


