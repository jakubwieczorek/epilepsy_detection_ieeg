-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity feedforward_w2_0_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 72
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of feedforward_w2_0_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111001100011010000100010010010", 
    1 => "00111100100100010001000001011110", 
    2 => "00111100111010011101001100000010", 
    3 => "10111010110010101000000110011001", 
    4 => "10111010011101000000111001011010", 
    5 => "10111001110111011100011000011001", 
    6 => "00111010101111110001101001011101", 
    7 => "10111011100000110110111010110101", 
    8 => "00111100110000010111111010111011", 
    9 => "10111100000110101110110101010111", 
    10 => "00111101111000010001101110100100", 
    11 => "00111010010110011001010001011011", 
    12 => "00111011010001010101010000110011", 
    13 => "00111011110000010010101011011000", 
    14 => "10111100110101011010110000000100", 
    15 => "00111011000001100010011011110110", 
    16 => "00111000111010101110000110001011", 
    17 => "10111001000101001110010111010110", 
    18 => "10111001100010000101000010011100", 
    19 => "00111000111000100111111000001111", 
    20 => "00111100011111000010111010111010", 
    21 => "00111000011010101110000110001011", 
    22 => "00111001010101001101110001100110", 
    23 => "10111010001101110011110100011001", 
    24 => "10111100001001010110010110000000", 
    25 => "01000001000101100111001110101000", 
    26 => "10111001010011011000010101011001", 
    27 => "00111100100010111110111110001101", 
    28 => "00111100101001000111011001101100", 
    29 => "00111101000110111100010001001100", 
    30 => "10111101101111111011011010011010", 
    31 => "10111100001110010100000011111111", 
    32 => "00110110010010010101001110011100", 
    33 => "10111111000011111011111110110110", 
    34 => "00111100001010010100101110111110", 
    35 => "10111100000011101000011001000000", 
    36 => "10111011011011011010001000101111", 
    37 => "10111100100000001110010010010111", 
    38 => "00111100100100010110000000001111", 
    39 => "01000001000100000110111010101011", 
    40 => "10111011100101001111111100000000", 
    41 => "10111100101110001111100110110001", 
    42 => "10111011010001011100100110100011", 
    43 => "10111110000101000100100100010011", 
    44 => "01000000111010010100101010111000", 
    45 => "10111010010010110010100101011111", 
    46 => "00111001110000000110100111101000", 
    47 => "10111011001001001011000100100101", 
    48 => "00111100000010111110011100101001", 
    49 => "10111010100100110011000110100001", 
    50 => "10111000111001101010111111001101", 
    51 => "10111010011010100001100000110111", 
    52 => "01000001000100111010000111000110", 
    53 => "00111001110110101010000011001011", 
    54 => "00111010100011110010000101110001", 
    55 => "10111100001010110011101010101100", 
    56 => "00111100011010110000101101111100", 
    57 => "10111100010101110010101111001011", 
    58 => "00111100110100010101000001010101", 
    59 => "10111100101110010001100100100110", 
    60 => "10111100100010101101100010100001", 
    61 => "10111011100000000111101110111011", 
    62 => "00111001000100111101100101100110", 
    63 => "00111100100011000011110100100101", 
    64 => "10111001001010111111011101101010", 
    65 => "00111001011011110001001101001001", 
    66 => "10111100001010101111001101011110", 
    67 => "00111001110100100011110101001111", 
    68 => "00111001001100100100001000000111", 
    69 => "01000001000000111011101111100000", 
    70 => "10111110101111101001001101011100", 
    71 => "10111011100110000110011101101010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity feedforward_w2_0 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 72;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of feedforward_w2_0 is
    component feedforward_w2_0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    feedforward_w2_0_rom_U :  component feedforward_w2_0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


