-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity feedforward_w2_0_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 72
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of feedforward_w2_0_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111011000001110010001010011111", 
    1 => "00111011110010101100010010110101", 
    2 => "10111010101011010000001111011010", 
    3 => "00111010100010001001001110111000", 
    4 => "00111010110000000100100001011010", 
    5 => "10111010111010111110110111111010", 
    6 => "10111011001100000000011110011010", 
    7 => "00111010011011001111101001101010", 
    8 => "01000000111111000101100001110111", 
    9 => "10111110111100110101011111000101", 
    10 => "10111010001010001000111100000000", 
    11 => "00111100101111011101100101111111", 
    12 => "10111011000001100111101011011001", 
    13 => "00111010010011000011010111001110", 
    14 => "10111010001111111110001110110000", 
    15 => "00111100100111001100110110010110", 
    16 => "10111011000101001100010001001000", 
    17 => "00111010101011100001000001001001", 
    18 => "01000000110101010100100100010111", 
    19 => "10111110101011100010101101001001", 
    20 => "00110111111110111010100010000010", 
    21 => "00111010001110001100111111000000", 
    22 => "00111011110110111100111011001000", 
    23 => "00111011111000010101100001110101", 
    24 => "01000000111111101111010001000111", 
    25 => "00111100100000110111101101001010", 
    26 => "01000000110111001100000110001001", 
    27 => "00111010110001000001010101101110", 
    28 => "00111010111000001010100001001100", 
    29 => "10111101001000100010110101010001", 
    30 => "10111100000000001101110000110011", 
    31 => "10111010100000101000110000110111", 
    32 => "10110111101110001000110010100100", 
    33 => "10111101000011010011010110101000", 
    34 => "10111100001111011010100101000011", 
    35 => "10111011100101110100101000110100", 
    36 => "00111101000001010011100111111100", 
    37 => "01000000111000110100010100001111", 
    38 => "10111010111011100010100001100111", 
    39 => "10111111000101011010110010101100", 
    40 => "00111011111100100011100010010111", 
    41 => "00111001111001100010100110010101", 
    42 => "10111011100110100101111010111011", 
    43 => "10111011111010100000111111010100", 
    44 => "00111010100000001111100110010000", 
    45 => "10111010000101011111001001000101", 
    46 => "00111001100110111011011010101010", 
    47 => "00111001000011001000001001011010", 
    48 => "00111011101100101110000101101001", 
    49 => "01000000111110101111001100011111", 
    50 => "00111010010001001101111011000010", 
    51 => "00111011110110101101101110000011", 
    52 => "10111011000011110110010010001100", 
    53 => "00110111100101101111111010110101", 
    54 => "00111001001110001000110010100100", 
    55 => "00111010011101001001010010010010", 
    56 => "10111011101100011101110101011101", 
    57 => "01000001000001100010111111001101", 
    58 => "10111010101101111100001101010000", 
    59 => "10111100101111011100001001101110", 
    60 => "01000000110111010000010011000010", 
    61 => "00111001101111000011100000101010", 
    62 => "01000000101001101100100110000010", 
    63 => "10111011100001010101010100111111", 
    64 => "00111001011111111101101001000000", 
    65 => "00111010000101101111111010110101", 
    66 => "00111011010001111111001101001001", 
    67 => "00111010110010110100101011101101", 
    68 => "00111000000101101111111010110101", 
    69 => "00111001111010101110000110001011", 
    70 => "10111100101111011110001111111100", 
    71 => "10111010110110000100010011010000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity feedforward_w2_0 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 72;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of feedforward_w2_0 is
    component feedforward_w2_0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    feedforward_w2_0_rom_U :  component feedforward_w2_0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


